TODO:

- add coinbaseData property to BTCTransactionInput to be able to read coinbase raw data when as a script it's invalid.
- make BTCTransactionInput store BTCOutpoint natively instead of building it on the fly.
- support for blocks and their validation
- support for network messages
- support for SPV like in Bitcoinj
- add aggregate header CoreBitcoinTests.h with tests
- QR code support (rendering and scanning) for OS X
- BitcoinQT wallet reader.
- Blockchain.info wallet reader.
- Modern unit test suite in Xcode 5 (currently asserts work good enough; if you want to improve that, do it yourself).
- Security analysis. Do we use truly random numbers? Do we sign things correctly? Do we have buffer overflows? And so on. Should add bounties for that.

Peer-to-peer connectivity features:

1. Support for Bitcoin network message would allow:
- SPV
- full node implementation
- experiments with compact full node implementations (partial block storage, partial UTXO)

2. Support for multi-peer connectivity and Bluetooth:
- to push tx directly to a recipient (e.g. while in roaming or where 3G connection is poor).
- to enable 2-factor signing (e.g. from a phone and from a laptop).
- enable in-person contract signing without intermediary app or service.


Done:

+ QR code support (rendering and scanning) for iOS
+ currency converter to have a common codebase not linked to any exchange
+ number formatter for various btc units
+ bitcoin URL support (parsing and composing)
+ configurable and extensible transaction builder

+ Unit tests for EC sign/verify.
+ Unit tests for transaction parsing/serialization.

+ deterministic ECDSA (where nonce is derived from privkey and message hash)
+ support for HD wallets

+ Scrypt wrapper API where fixed number of rounds and memory usage can be specified (and not computed from current machine capabilities) [bounty 0.1 BTC by @oleganza]
- Done in a separate BTCScrypt repository (https://github.com/oleganza/BTCScrypt)

+ Sample code for creating a transaction given some txouts.
+ Sample code for verifying a transaction.

+ full transaction support.
+ Universal OpenSSL libraries. Or as a part of a build process.
+ CoreBitcoin.framework for iOS and OS X with OpenSSL inside.

+ rename both iOS and OSX frameworks to CoreBitcoin so the #include can be the same for both platforms in a portable code (we can ship it as "iOS/CoreBitcoin.framework")
+ add aggregate header CoreBitcoin.h with all non-test and non-category methods.
+ add aggregate header CoreBitcoin+Categories.h that includes categories on standard classes.
+ add openssl dependency in cocoapods (we can specify the exact hash for security). If openssl cocoapods does not have fat iOS build, that needs to be fixed.


